(ns com.viasat.git.moquist.cwmp-cpe.http.cnr-server
  "HTTP server and main RingHandler to receive Connection Requests from the ACS... or any other HTTP client with the requisite credentials."
  (:require
   [com.stuartsierra.component :as component]
   [com.viasat.git.moquist.cwmp-cpe.stateful-device :as stateful-device]
   [com.viasat.git.moquist.cwmp-cpe.stateful-device-set :as stateful-device-set]
   [com.viasat.git.moquist.ring.middleware.http-digest :as http-digest]
   [reitit.ring :as ring]
   [ring.adapter.jetty :as jetty]
   [taoensso.timbre :as log]))

(set! *warn-on-reflection* true)

(defn stateful-device-lookup-wrapper [stateful-device-set]
  (fn [handler]
    (fn [{:keys [path-params] :as request}]
      (let [device-id (:device-id path-params)
            stateful-device (stateful-device-set/get-device stateful-device-set device-id)]
        (if stateful-device
          (handler (assoc request :stateful-device stateful-device))
          {:status 404
           :body (format "Device %s not found" device-id)})))))

(defn wrap-digest-auth [handler]
  (fn [{:keys [stateful-device] :as request}]
    (let [auth-fn
          (http-digest/wrap-digest-auth
           handler
           (partial stateful-device/username->password stateful-device)
           {:realm "TR-069 Connection Request (cwmp-cpe-horde)"})]
      (auth-fn request))))

(defn wrap-catch-exceptions [handler]
  (fn [request]
    (try
      (handler request)
      (catch Throwable t
        (log/error "Caught exception" t)
        {:status 500
         :body "Server error."}))))

(defn route-handler [{:as _ring-handler :keys [stateful-device-set]}]
  (ring/ring-handler
   (ring/router
      ;; 3.2.2.2 HTTP Specific Connection Request Requirements
      ;; "The Connection Request MUST use an HTTP 1.1 GET to a specific URL designated
      ;; by the CPE. The URL value is available as read-only Parameter on the CPE. The
      ;; path of this URL value SHOULD be randomly generated by the CPE so that it is
      ;; unique per CPE."
      ;;
      ;; HOWEVER, in the case of this testing tool, device-id must already be unique,
      ;; we don't have serious security concerns so this is sufficient.
    [["/cpes/:device-id" {:get {:handler
                                (fn [{:keys [stateful-device] :as _request}]
                                  (stateful-device/notify-cnr! stateful-device)
                                  {:status 204})
                                :middleware [wrap-catch-exceptions
                                             (stateful-device-lookup-wrapper stateful-device-set)
                                             wrap-digest-auth]}}]])

   (ring/create-default-handler
    {:not-found (constantly {:body "Not found" :status 404})})))

(defrecord RingHandler [config]
  component/Lifecycle
  (start [this]
    (log/trace :start-RingHandler)
    (assoc this :handler (route-handler this)))
  (stop [this]
    (log/trace ::stop-RingHandler)
    (assoc this :handler nil)))

(defn ring-handler
  [config]
  (map->RingHandler {:config config}))

(defrecord HttpApi [config]
  component/Lifecycle
  (start [{:keys [ring-handler] :as component}]
    (log/info "Starting HttpApi")
    (assert (:handler ring-handler) "Missing :handler in ring-handler")
    (let [port (:port config)
          server (jetty/run-jetty
                  (:handler ring-handler)
                  {:port port :join? false})]
      (log/info (str "Started Jetty on port " port))
      (assoc component
             :server server
             :port port)))
  (stop [component]
    (log/info "Stopping HttpApi")
    (.stop ^org.eclipse.jetty.server.Server (:server component))
    (assoc component :server nil)))

(defn http-api
  [config]
  (map->HttpApi {:config config}))

(comment
  (do
    (def system-map {:http-api (component/using (http-api {:port 1997})
                                                [:ring-handler])
                     :ring-handler (ring-handler {})})
    (def sys
      (component/start
       (apply
        component/system-map
        (mapcat identity system-map))))
    :done)

  (component/stop sys))
